// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model board {
  id             String  @id @default(uuid())
  organizationId String
  name           String
  imageUrl       String
  favorite       Boolean @default(false)
  lists          list[]
}

model list {
  id      String @id @default(uuid())
  boardId String
  board   board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  name    String
  order   Int
  cards   card[]

  @@index([boardId])
}

model card {
  id          String        @id @default(uuid())
  columnId    String
  column      list          @relation(fields: [columnId], references: [id], onDelete: Cascade)
  name        String
  description String?
  order       Int
  date        DateTime?
  comments    Comment[]
  colors      colorOnCard[]
  members     cardMember[]
  checklists  checklist[]

  @@index([columnId, id])
}

model Comment {
  id        String    @id @default(uuid())
  cardId    String
  card      card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parentId  String?
  parent    Comment?  @relation("parentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Comment[] @relation("parentChild")
  userId    String
  userImage String    @db.Text
  userName  String    @db.Text

  @@index([cardId])
  @@index([parentId])
}

model members {
  userId   String       @id
  userName String
  imageUrl String
  cards    cardMember[] // Relation through cardMember

  @@index([userId]) // Index on userId to speed up queries
}

model cardMember {
  cardId            String
  memberId          String
  memberDesignation String
  card              card    @relation(fields: [cardId], references: [id], onDelete: Cascade)
  member            members @relation(fields: [memberId], references: [userId], onDelete: Cascade)

  @@id([cardId, memberId]) // Composite primary key
  @@index([cardId]) // Index on cardId to speed up queries
  @@index([memberId]) // Index on memberId to speed up queries
}

model colorOnCard {
  id     String  @id @default(uuid())
  cardId String
  card   card    @relation(fields: [cardId], references: [id], onDelete: Cascade)
  color  String
  name   String?

  @@index([cardId]) // Index on cardId to speed up queries
}

model checklist {
  checkListId String @id @default(uuid())
  name        String
  todos       todo[]
  cardId      String
  card        card   @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@index([cardId])
}

model todo {
  todoId      String    @id @default(uuid())
  name        String
  done        Boolean
  checkListId String
  checkList   checklist @relation(fields: [checkListId], references: [checkListId], onDelete: Cascade)

  @@index([checkListId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
  MOVE
  MARK
  UNMARK
  COMMENT
  JOINED
  LEFT
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
  CHECKLIST
  TODO
  LABEL
  DATE
  MEMBER
}

model audit_log {
  id          String      @id @default(uuid())
  orgId       String
  boardId     String
  cardId      String?
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String      @db.Text
  userName    String      @db.Text
  action      ACTION
  createdAt   DateTime    @default(now())
}
